// Mocks generated by Mockito 5.4.6 from annotations
// in day_break/test/notification_service_renewal_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:day_break/models/recurrence_pattern.dart' as _i9;
import 'package:day_break/models/weather_summary.dart' as _i3;
import 'package:day_break/services/settings_service.dart' as _i4;
import 'package:day_break/services/weather_service.dart' as _i5;
import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i10;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i11;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i13;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart'
    as _i15;
import 'package:flutter_local_notifications/src/types.dart' as _i16;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i12;
import 'package:geolocator/geolocator.dart' as _i8;
import 'package:get/get.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:timezone/timezone.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeInternalFinalCallback_0<T> extends _i1.SmartFake
    implements _i2.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeatherSummary_1 extends _i1.SmartFake
    implements _i3.WeatherSummary {
  _FakeWeatherSummary_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_2 extends _i1.SmartFake implements Uri {
  _FakeUri_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettingsService_3 extends _i1.SmartFake
    implements _i4.SettingsService {
  _FakeSettingsService_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WeatherService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherService extends _i1.Mock implements _i5.WeatherService {
  @override
  bool get hasApiKey =>
      (super.noSuchMethod(
            Invocation.getter(#hasApiKey),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get apiKeyStatusMessage =>
      (super.noSuchMethod(
            Invocation.getter(#apiKeyStatusMessage),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#apiKeyStatusMessage),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.getter(#apiKeyStatusMessage),
            ),
          )
          as String);

  @override
  _i2.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(
            Invocation.getter(#onStart),
            returnValue: _FakeInternalFinalCallback_0<void>(
              this,
              Invocation.getter(#onStart),
            ),
            returnValueForMissingStub: _FakeInternalFinalCallback_0<void>(
              this,
              Invocation.getter(#onStart),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(
            Invocation.getter(#onDelete),
            returnValue: _FakeInternalFinalCallback_0<void>(
              this,
              Invocation.getter(#onDelete),
            ),
            returnValueForMissingStub: _FakeInternalFinalCallback_0<void>(
              this,
              Invocation.getter(#onDelete),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized =>
      (super.noSuchMethod(
            Invocation.getter(#initialized),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i7.Future<_i3.WeatherSummary> getWeather(_i8.Position? position) =>
      (super.noSuchMethod(
            Invocation.method(#getWeather, [position]),
            returnValue: _i7.Future<_i3.WeatherSummary>.value(
              _FakeWeatherSummary_1(
                this,
                Invocation.method(#getWeather, [position]),
              ),
            ),
            returnValueForMissingStub: _i7.Future<_i3.WeatherSummary>.value(
              _FakeWeatherSummary_1(
                this,
                Invocation.method(#getWeather, [position]),
              ),
            ),
          )
          as _i7.Future<_i3.WeatherSummary>);

  @override
  _i7.Future<_i3.WeatherSummary> getWeatherByLocation(String? locationName) =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherByLocation, [locationName]),
            returnValue: _i7.Future<_i3.WeatherSummary>.value(
              _FakeWeatherSummary_1(
                this,
                Invocation.method(#getWeatherByLocation, [locationName]),
              ),
            ),
            returnValueForMissingStub: _i7.Future<_i3.WeatherSummary>.value(
              _FakeWeatherSummary_1(
                this,
                Invocation.method(#getWeatherByLocation, [locationName]),
              ),
            ),
          )
          as _i7.Future<_i3.WeatherSummary>);

  @override
  Uri buildTomorrowRealtimeUrlForTesting(
    double? latitude,
    double? longitude, {
    List<String>? fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #buildTomorrowRealtimeUrlForTesting,
              [latitude, longitude],
              {#fields: fields},
            ),
            returnValue: _FakeUri_2(
              this,
              Invocation.method(
                #buildTomorrowRealtimeUrlForTesting,
                [latitude, longitude],
                {#fields: fields},
              ),
            ),
            returnValueForMissingStub: _FakeUri_2(
              this,
              Invocation.method(
                #buildTomorrowRealtimeUrlForTesting,
                [latitude, longitude],
                {#fields: fields},
              ),
            ),
          )
          as Uri);

  @override
  Uri buildTomorrowForecastUrlForTesting(
    double? latitude,
    double? longitude, {
    String? timesteps = '1h',
    List<String>? fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #buildTomorrowForecastUrlForTesting,
              [latitude, longitude],
              {#timesteps: timesteps, #fields: fields},
            ),
            returnValue: _FakeUri_2(
              this,
              Invocation.method(
                #buildTomorrowForecastUrlForTesting,
                [latitude, longitude],
                {#timesteps: timesteps, #fields: fields},
              ),
            ),
            returnValueForMissingStub: _FakeUri_2(
              this,
              Invocation.method(
                #buildTomorrowForecastUrlForTesting,
                [latitude, longitude],
                {#timesteps: timesteps, #fields: fields},
              ),
            ),
          )
          as Uri);

  @override
  _i3.WeatherSummary parseTomorrowRealtime(
    Map<String, dynamic>? json, {
    double? latitude,
    double? longitude,
    String? fallbackLocation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #parseTomorrowRealtime,
              [json],
              {
                #latitude: latitude,
                #longitude: longitude,
                #fallbackLocation: fallbackLocation,
              },
            ),
            returnValue: _FakeWeatherSummary_1(
              this,
              Invocation.method(
                #parseTomorrowRealtime,
                [json],
                {
                  #latitude: latitude,
                  #longitude: longitude,
                  #fallbackLocation: fallbackLocation,
                },
              ),
            ),
            returnValueForMissingStub: _FakeWeatherSummary_1(
              this,
              Invocation.method(
                #parseTomorrowRealtime,
                [json],
                {
                  #latitude: latitude,
                  #longitude: longitude,
                  #fallbackLocation: fallbackLocation,
                },
              ),
            ),
          )
          as _i3.WeatherSummary);

  @override
  _i7.Future<bool> validateLocation(String? locationName) =>
      (super.noSuchMethod(
            Invocation.method(#validateLocation, [locationName]),
            returnValue: _i7.Future<bool>.value(false),
            returnValueForMissingStub: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void onInit() => super.noSuchMethod(
    Invocation.method(#onInit, []),
    returnValueForMissingStub: null,
  );

  @override
  void onReady() => super.noSuchMethod(
    Invocation.method(#onReady, []),
    returnValueForMissingStub: null,
  );

  @override
  void onClose() => super.noSuchMethod(
    Invocation.method(#onClose, []),
    returnValueForMissingStub: null,
  );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
    Invocation.method(#$configureLifeCycle, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i4.SettingsService {
  @override
  bool get isRecurring =>
      (super.noSuchMethod(
            Invocation.getter(#isRecurring),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i9.RecurrencePattern get recurrencePattern =>
      (super.noSuchMethod(
            Invocation.getter(#recurrencePattern),
            returnValue: _i9.RecurrencePattern.daily,
            returnValueForMissingStub: _i9.RecurrencePattern.daily,
          )
          as _i9.RecurrencePattern);

  @override
  List<int> get recurrenceDays =>
      (super.noSuchMethod(
            Invocation.getter(#recurrenceDays),
            returnValue: <int>[],
            returnValueForMissingStub: <int>[],
          )
          as List<int>);

  @override
  _i2.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(
            Invocation.getter(#onStart),
            returnValue: _FakeInternalFinalCallback_0<void>(
              this,
              Invocation.getter(#onStart),
            ),
            returnValueForMissingStub: _FakeInternalFinalCallback_0<void>(
              this,
              Invocation.getter(#onStart),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(
            Invocation.getter(#onDelete),
            returnValue: _FakeInternalFinalCallback_0<void>(
              this,
              Invocation.getter(#onDelete),
            ),
            returnValueForMissingStub: _FakeInternalFinalCallback_0<void>(
              this,
              Invocation.getter(#onDelete),
            ),
          )
          as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized =>
      (super.noSuchMethod(
            Invocation.getter(#initialized),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i7.Future<_i4.SettingsService> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i7.Future<_i4.SettingsService>.value(
              _FakeSettingsService_3(this, Invocation.method(#init, [])),
            ),
            returnValueForMissingStub: _i7.Future<_i4.SettingsService>.value(
              _FakeSettingsService_3(this, Invocation.method(#init, [])),
            ),
          )
          as _i7.Future<_i4.SettingsService>);

  @override
  _i7.Future<void> setLocation(String? location) =>
      (super.noSuchMethod(
            Invocation.method(#setLocation, [location]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setAnnouncementHour(int? hour) =>
      (super.noSuchMethod(
            Invocation.method(#setAnnouncementHour, [hour]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setAnnouncementMinute(int? minute) =>
      (super.noSuchMethod(
            Invocation.method(#setAnnouncementMinute, [minute]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setAnnouncementTime(int? hour, int? minute) =>
      (super.noSuchMethod(
            Invocation.method(#setAnnouncementTime, [hour, minute]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setIsRecurring(bool? isRecurring) =>
      (super.noSuchMethod(
            Invocation.method(#setIsRecurring, [isRecurring]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setRecurrencePattern(_i9.RecurrencePattern? pattern) =>
      (super.noSuchMethod(
            Invocation.method(#setRecurrencePattern, [pattern]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setRecurrenceDays(List<int>? days) =>
      (super.noSuchMethod(
            Invocation.method(#setRecurrenceDays, [days]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setRecurringConfig({
    required bool? isRecurring,
    _i9.RecurrencePattern? pattern = _i9.RecurrencePattern.daily,
    List<int>? customDays,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setRecurringConfig, [], {
              #isRecurring: isRecurring,
              #pattern: pattern,
              #customDays: customDays,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> clearSettings() =>
      (super.noSuchMethod(
            Invocation.method(#clearSettings, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void onInit() => super.noSuchMethod(
    Invocation.method(#onInit, []),
    returnValueForMissingStub: null,
  );

  @override
  void onReady() => super.noSuchMethod(
    Invocation.method(#onReady, []),
    returnValueForMissingStub: null,
  );

  @override
  void onClose() => super.noSuchMethod(
    Invocation.method(#onClose, []),
    returnValueForMissingStub: null,
  );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
    Invocation.method(#$configureLifeCycle, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i10.FlutterLocalNotificationsPlugin {
  @override
  _i7.Future<bool?> initialize(
    _i11.InitializationSettings? initializationSettings, {
    _i12.DidReceiveNotificationResponseCallback?
    onDidReceiveNotificationResponse,
    _i12.DidReceiveBackgroundNotificationResponseCallback?
    onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [initializationSettings],
              {
                #onDidReceiveNotificationResponse:
                    onDidReceiveNotificationResponse,
                #onDidReceiveBackgroundNotificationResponse:
                    onDidReceiveBackgroundNotificationResponse,
              },
            ),
            returnValue: _i7.Future<bool?>.value(),
            returnValueForMissingStub: _i7.Future<bool?>.value(),
          )
          as _i7.Future<bool?>);

  @override
  _i7.Future<_i12.NotificationAppLaunchDetails?>
  getNotificationAppLaunchDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationAppLaunchDetails, []),
            returnValue: _i7.Future<_i12.NotificationAppLaunchDetails?>.value(),
            returnValueForMissingStub:
                _i7.Future<_i12.NotificationAppLaunchDetails?>.value(),
          )
          as _i7.Future<_i12.NotificationAppLaunchDetails?>);

  @override
  _i7.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i13.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #show,
              [id, title, body, notificationDetails],
              {#payload: payload},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(#cancel, [id], {#tag: tag}),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> cancelAll() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAll, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> cancelAllPendingNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAllPendingNotifications, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i14.TZDateTime? scheduledDate,
    _i13.NotificationDetails? notificationDetails, {
    required _i15.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i16.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #zonedSchedule,
              [id, title, body, scheduledDate, notificationDetails],
              {
                #androidScheduleMode: androidScheduleMode,
                #payload: payload,
                #matchDateTimeComponents: matchDateTimeComponents,
              },
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i12.RepeatInterval? repeatInterval,
    _i13.NotificationDetails? notificationDetails, {
    required _i15.AndroidScheduleMode? androidScheduleMode,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShow,
              [id, title, body, repeatInterval, notificationDetails],
              {#androidScheduleMode: androidScheduleMode, #payload: payload},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval,
    _i13.NotificationDetails? notificationDetails, {
    _i15.AndroidScheduleMode? androidScheduleMode =
        _i15.AndroidScheduleMode.exact,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShowWithDuration,
              [id, title, body, repeatDurationInterval, notificationDetails],
              {#androidScheduleMode: androidScheduleMode, #payload: payload},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i12.PendingNotificationRequest>>
  pendingNotificationRequests() =>
      (super.noSuchMethod(
            Invocation.method(#pendingNotificationRequests, []),
            returnValue:
                _i7.Future<List<_i12.PendingNotificationRequest>>.value(
                  <_i12.PendingNotificationRequest>[],
                ),
            returnValueForMissingStub:
                _i7.Future<List<_i12.PendingNotificationRequest>>.value(
                  <_i12.PendingNotificationRequest>[],
                ),
          )
          as _i7.Future<List<_i12.PendingNotificationRequest>>);

  @override
  _i7.Future<List<_i12.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotifications, []),
            returnValue: _i7.Future<List<_i12.ActiveNotification>>.value(
              <_i12.ActiveNotification>[],
            ),
            returnValueForMissingStub:
                _i7.Future<List<_i12.ActiveNotification>>.value(
                  <_i12.ActiveNotification>[],
                ),
          )
          as _i7.Future<List<_i12.ActiveNotification>>);
}
