// Mocks generated by Mockito 5.4.6 from annotations
// in day_break/test/notification_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:day_break/models/weather_summary.dart' as _i3;
import 'package:day_break/services/settings_service.dart' as _i4;
import 'package:day_break/services/weather_service.dart' as _i14;
import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart' as _i5;
import 'package:flutter_local_notifications/src/initialization_settings.dart' as _i7;
import 'package:flutter_local_notifications/src/notification_details.dart' as _i9;
import 'package:flutter_local_notifications/src/platform_flutter_local_notifications.dart' as _i16;
import 'package:flutter_local_notifications/src/platform_specifics/android/enums.dart' as _i19;
import 'package:flutter_local_notifications/src/platform_specifics/android/initialization_settings.dart' as _i17;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_channel.dart' as _i21;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_channel_group.dart' as _i20;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_details.dart' as _i18;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart' as _i12;
import 'package:flutter_local_notifications/src/platform_specifics/android/styles/messaging_style_information.dart' as _i22;
import 'package:flutter_local_notifications/src/platform_specifics/ios/enums.dart' as _i11;
import 'package:flutter_local_notifications/src/types.dart' as _i13;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart' as _i8;
import 'package:geolocator/geolocator.dart' as _i15;
import 'package:get/get.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:timezone/timezone.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeInternalFinalCallback_0<T> extends _i1.SmartFake implements _i2.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeWeatherSummary_1 extends _i1.SmartFake implements _i3.WeatherSummary {
  _FakeWeatherSummary_1(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeSettingsService_2 extends _i1.SmartFake implements _i4.SettingsService {
  _FakeSettingsService_2(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock implements _i5.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool?> initialize(
    _i7.InitializationSettings? initializationSettings, {
    _i8.DidReceiveNotificationResponseCallback? onDidReceiveNotificationResponse,
    _i8.DidReceiveBackgroundNotificationResponseCallback? onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [initializationSettings],
              {
                #onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,
                #onDidReceiveBackgroundNotificationResponse: onDidReceiveBackgroundNotificationResponse,
              },
            ),
            returnValue: _i6.Future<bool?>.value(),
          )
          as _i6.Future<bool?>);

  @override
  _i6.Future<_i8.NotificationAppLaunchDetails?> getNotificationAppLaunchDetails() =>
      (super.noSuchMethod(Invocation.method(#getNotificationAppLaunchDetails, []), returnValue: _i6.Future<_i8.NotificationAppLaunchDetails?>.value())
          as _i6.Future<_i8.NotificationAppLaunchDetails?>);

  @override
  _i6.Future<void> show(int? id, String? title, String? body, _i9.NotificationDetails? notificationDetails, {String? payload}) =>
      (super.noSuchMethod(
            Invocation.method(#show, [id, title, body, notificationDetails], {#payload: payload}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(#cancel, [id], {#tag: tag}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> cancelAll() =>
      (super.noSuchMethod(Invocation.method(#cancelAll, []), returnValue: _i6.Future<void>.value(), returnValueForMissingStub: _i6.Future<void>.value())
          as _i6.Future<void>);

  @override
  _i6.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i10.TZDateTime? scheduledDate,
    _i9.NotificationDetails? notificationDetails, {
    required _i11.UILocalNotificationDateInterpretation? uiLocalNotificationDateInterpretation,
    bool? androidAllowWhileIdle = false,
    _i12.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i13.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #zonedSchedule,
              [id, title, body, scheduledDate, notificationDetails],
              {
                #uiLocalNotificationDateInterpretation: uiLocalNotificationDateInterpretation,
                #androidAllowWhileIdle: androidAllowWhileIdle,
                #androidScheduleMode: androidScheduleMode,
                #payload: payload,
                #matchDateTimeComponents: matchDateTimeComponents,
              },
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i8.RepeatInterval? repeatInterval,
    _i9.NotificationDetails? notificationDetails, {
    String? payload,
    bool? androidAllowWhileIdle = false,
    _i12.AndroidScheduleMode? androidScheduleMode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShow,
              [id, title, body, repeatInterval, notificationDetails],
              {#payload: payload, #androidAllowWhileIdle: androidAllowWhileIdle, #androidScheduleMode: androidScheduleMode},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval,
    _i9.NotificationDetails? notificationDetails, {
    _i12.AndroidScheduleMode? androidScheduleMode = _i12.AndroidScheduleMode.exact,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShowWithDuration,
              [id, title, body, repeatDurationInterval, notificationDetails],
              {#androidScheduleMode: androidScheduleMode, #payload: payload},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i8.PendingNotificationRequest>> pendingNotificationRequests() =>
      (super.noSuchMethod(
            Invocation.method(#pendingNotificationRequests, []),
            returnValue: _i6.Future<List<_i8.PendingNotificationRequest>>.value(<_i8.PendingNotificationRequest>[]),
          )
          as _i6.Future<List<_i8.PendingNotificationRequest>>);

  @override
  _i6.Future<List<_i8.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotifications, []),
            returnValue: _i6.Future<List<_i8.ActiveNotification>>.value(<_i8.ActiveNotification>[]),
          )
          as _i6.Future<List<_i8.ActiveNotification>>);
}

/// A class which mocks [WeatherService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherService extends _i1.Mock implements _i14.WeatherService {
  MockWeatherService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(Invocation.getter(#onStart), returnValue: _FakeInternalFinalCallback_0<void>(this, Invocation.getter(#onStart)))
          as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(Invocation.getter(#onDelete), returnValue: _FakeInternalFinalCallback_0<void>(this, Invocation.getter(#onDelete)))
          as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false) as bool);

  @override
  _i6.Future<_i3.WeatherSummary> getWeather(_i15.Position? position) =>
      (super.noSuchMethod(
            Invocation.method(#getWeather, [position]),
            returnValue: _i6.Future<_i3.WeatherSummary>.value(_FakeWeatherSummary_1(this, Invocation.method(#getWeather, [position]))),
          )
          as _i6.Future<_i3.WeatherSummary>);

  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []), returnValueForMissingStub: null);

  @override
  void onInit() => super.noSuchMethod(Invocation.method(#onInit, []), returnValueForMissingStub: null);

  @override
  void onReady() => super.noSuchMethod(Invocation.method(#onReady, []), returnValueForMissingStub: null);

  @override
  void onClose() => super.noSuchMethod(Invocation.method(#onClose, []), returnValueForMissingStub: null);

  @override
  void $configureLifeCycle() => super.noSuchMethod(Invocation.method(#$configureLifeCycle, []), returnValueForMissingStub: null);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i4.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(Invocation.getter(#onStart), returnValue: _FakeInternalFinalCallback_0<void>(this, Invocation.getter(#onStart)))
          as _i2.InternalFinalCallback<void>);

  @override
  _i2.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(Invocation.getter(#onDelete), returnValue: _FakeInternalFinalCallback_0<void>(this, Invocation.getter(#onDelete)))
          as _i2.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false) as bool);

  @override
  _i6.Future<_i4.SettingsService> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i6.Future<_i4.SettingsService>.value(_FakeSettingsService_2(this, Invocation.method(#init, []))),
          )
          as _i6.Future<_i4.SettingsService>);

  @override
  _i6.Future<void> setLocation(String? location) =>
      (super.noSuchMethod(
            Invocation.method(#setLocation, [location]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setAnnouncementHour(int? hour) =>
      (super.noSuchMethod(
            Invocation.method(#setAnnouncementHour, [hour]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setAnnouncementMinute(int? minute) =>
      (super.noSuchMethod(
            Invocation.method(#setAnnouncementMinute, [minute]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void onInit() => super.noSuchMethod(Invocation.method(#onInit, []), returnValueForMissingStub: null);

  @override
  void onReady() => super.noSuchMethod(Invocation.method(#onReady, []), returnValueForMissingStub: null);

  @override
  void onClose() => super.noSuchMethod(Invocation.method(#onClose, []), returnValueForMissingStub: null);

  @override
  void $configureLifeCycle() => super.noSuchMethod(Invocation.method(#$configureLifeCycle, []), returnValueForMissingStub: null);
}

/// A class which mocks [AndroidFlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidFlutterLocalNotificationsPlugin extends _i1.Mock implements _i16.AndroidFlutterLocalNotificationsPlugin {
  MockAndroidFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> initialize(
    _i17.AndroidInitializationSettings? initializationSettings, {
    _i8.DidReceiveNotificationResponseCallback? onDidReceiveNotificationResponse,
    _i8.DidReceiveBackgroundNotificationResponseCallback? onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [initializationSettings],
              {
                #onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,
                #onDidReceiveBackgroundNotificationResponse: onDidReceiveBackgroundNotificationResponse,
              },
            ),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool?> requestExactAlarmsPermission() =>
      (super.noSuchMethod(Invocation.method(#requestExactAlarmsPermission, []), returnValue: _i6.Future<bool?>.value()) as _i6.Future<bool?>);

  @override
  _i6.Future<bool?> requestFullScreenIntentPermission() =>
      (super.noSuchMethod(Invocation.method(#requestFullScreenIntentPermission, []), returnValue: _i6.Future<bool?>.value()) as _i6.Future<bool?>);

  @override
  _i6.Future<bool?> requestNotificationsPermission() =>
      (super.noSuchMethod(Invocation.method(#requestNotificationsPermission, []), returnValue: _i6.Future<bool?>.value()) as _i6.Future<bool?>);

  @override
  _i6.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i10.TZDateTime? scheduledDate,
    _i18.AndroidNotificationDetails? notificationDetails, {
    required _i12.AndroidScheduleMode? scheduleMode,
    String? payload,
    _i13.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #zonedSchedule,
              [id, title, body, scheduledDate, notificationDetails],
              {#scheduleMode: scheduleMode, #payload: payload, #matchDateTimeComponents: matchDateTimeComponents},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> startForegroundService(
    int? id,
    String? title,
    String? body, {
    _i18.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i19.AndroidServiceStartType? startType = _i19.AndroidServiceStartType.startSticky,
    Set<_i19.AndroidServiceForegroundType>? foregroundServiceTypes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #startForegroundService,
              [id, title, body],
              {#notificationDetails: notificationDetails, #payload: payload, #startType: startType, #foregroundServiceTypes: foregroundServiceTypes},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> stopForegroundService() =>
      (super.noSuchMethod(
            Invocation.method(#stopForegroundService, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> show(int? id, String? title, String? body, {_i18.AndroidNotificationDetails? notificationDetails, String? payload}) =>
      (super.noSuchMethod(
            Invocation.method(#show, [id, title, body], {#notificationDetails: notificationDetails, #payload: payload}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i8.RepeatInterval? repeatInterval, {
    _i18.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i12.AndroidScheduleMode? scheduleMode = _i12.AndroidScheduleMode.exact,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShow,
              [id, title, body, repeatInterval],
              {#notificationDetails: notificationDetails, #payload: payload, #scheduleMode: scheduleMode},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval, {
    _i18.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i12.AndroidScheduleMode? scheduleMode = _i12.AndroidScheduleMode.exact,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShowWithDuration,
              [id, title, body, repeatDurationInterval],
              {#notificationDetails: notificationDetails, #payload: payload, #scheduleMode: scheduleMode},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(#cancel, [id], {#tag: tag}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> createNotificationChannelGroup(_i20.AndroidNotificationChannelGroup? notificationChannelGroup) =>
      (super.noSuchMethod(
            Invocation.method(#createNotificationChannelGroup, [notificationChannelGroup]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteNotificationChannelGroup(String? groupId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotificationChannelGroup, [groupId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> createNotificationChannel(_i21.AndroidNotificationChannel? notificationChannel) =>
      (super.noSuchMethod(
            Invocation.method(#createNotificationChannel, [notificationChannel]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteNotificationChannel(String? channelId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotificationChannel, [channelId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i22.MessagingStyleInformation?> getActiveNotificationMessagingStyle(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotificationMessagingStyle, [id], {#tag: tag}),
            returnValue: _i6.Future<_i22.MessagingStyleInformation?>.value(),
          )
          as _i6.Future<_i22.MessagingStyleInformation?>);

  @override
  _i6.Future<List<_i21.AndroidNotificationChannel>?> getNotificationChannels() =>
      (super.noSuchMethod(Invocation.method(#getNotificationChannels, []), returnValue: _i6.Future<List<_i21.AndroidNotificationChannel>?>.value())
          as _i6.Future<List<_i21.AndroidNotificationChannel>?>);

  @override
  _i6.Future<bool?> areNotificationsEnabled() =>
      (super.noSuchMethod(Invocation.method(#areNotificationsEnabled, []), returnValue: _i6.Future<bool?>.value()) as _i6.Future<bool?>);

  @override
  _i6.Future<bool?> canScheduleExactNotifications() =>
      (super.noSuchMethod(Invocation.method(#canScheduleExactNotifications, []), returnValue: _i6.Future<bool?>.value()) as _i6.Future<bool?>);

  @override
  _i6.Future<void> cancelAll() =>
      (super.noSuchMethod(Invocation.method(#cancelAll, []), returnValue: _i6.Future<void>.value(), returnValueForMissingStub: _i6.Future<void>.value())
          as _i6.Future<void>);

  @override
  _i6.Future<_i8.NotificationAppLaunchDetails?> getNotificationAppLaunchDetails() =>
      (super.noSuchMethod(Invocation.method(#getNotificationAppLaunchDetails, []), returnValue: _i6.Future<_i8.NotificationAppLaunchDetails?>.value())
          as _i6.Future<_i8.NotificationAppLaunchDetails?>);

  @override
  _i6.Future<List<_i8.PendingNotificationRequest>> pendingNotificationRequests() =>
      (super.noSuchMethod(
            Invocation.method(#pendingNotificationRequests, []),
            returnValue: _i6.Future<List<_i8.PendingNotificationRequest>>.value(<_i8.PendingNotificationRequest>[]),
          )
          as _i6.Future<List<_i8.PendingNotificationRequest>>);

  @override
  _i6.Future<List<_i8.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotifications, []),
            returnValue: _i6.Future<List<_i8.ActiveNotification>>.value(<_i8.ActiveNotification>[]),
          )
          as _i6.Future<List<_i8.ActiveNotification>>);
}
